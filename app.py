import streamlit as st
import cv2
import tempfile
import os
import base64
import time
import requests
import json
import numpy as np
from io import BytesIO
from PIL import Image
import pygame
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–£–º–Ω–æ–µ –ó–µ—Ä–∫–∞–ª–æ - –ê–Ω–∞–ª–∏–∑ –∫–æ–∂–∏",
    page_icon="ü™û",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–≤—É–∫–æ–≤–æ–π –≤–æ–ª–Ω—ã
st.markdown("""
<style>
    .main {
        background-color: #1E1E1E;
        color: white;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        font-size: 18px;
        padding: 12px 24px;
        border-radius: 8px;
        border: none;
        transition: all 0.3s;
        width: 100%;
    }
    .stButton>button:hover {
        background-color: #45a049;
        transform: scale(1.02);
    }
    .results-area {
        background-color: #2E2E2E;
        padding: 20px;
        border-radius: 10px;
        margin-top: 20px;
    }
    .title {
        text-align: center;
        font-size: 36px;
        margin-bottom: 30px;
        font-weight: bold;
    }
    .loading {
        text-align: center;
        font-size: 24px;
        margin: 30px 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .thinking-dots {
        display: inline-block;
        width: 30px;
        text-align: left;
        height: 24px;
    }
    .footer {
        text-align: center;
        margin-top: 30px;
        font-size: 12px;
        color: #888;
    }
    .highlight {
        background-color: #4CAF50;
        color: white;
        padding: 2px 6px;
        border-radius: 4px;
    }
    /* Audio player styling */
    audio {
        width: 100%;
        margin-top: 15px;
        margin-bottom: 15px;
        border-radius: 30px;
        height: 40px;
        display: none; /* –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä */
    }
    /* Hide video player controls */
    .stCamera > div {
        border: 2px solid #4CAF50;
        border-radius: 10px;
        overflow: hidden;
    }
    /* –ê—É–¥–∏–æ –≤–æ–ª–Ω–∞ */
    .audio-wave-container {
        height: 60px;
        background-color: #2a0854;
        border-radius: 8px;
        padding: 5px;
        margin: 15px 0;
        overflow: hidden;
        position: relative;
    }
    .audio-wave {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
    }
    .wave-bar {
        background: #00f6fe;
        width: 4px;
        margin: 0 2px;
        border-radius: 2px;
        animation: sound 0ms -800ms linear infinite alternate;
    }
    .wave-bar:nth-child(4n+1) {
        background: #ff48b0;
    }
    
    @keyframes sound {
        0% {
            height: 10%;
        }
        100% {
            height: 80%;
        }
    }
    .rec-indicator {
        position: absolute;
        top: 10px;
        right: 10px;
        width: 12px;
        height: 12px;
        background-color: #f44336;
        border-radius: 50%;
        animation: blink 1s infinite;
    }
    @keyframes blink {
        0% { opacity: 1; }
        50% { opacity: 0.3; }
        100% { opacity: 1; }
    }
    /* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π */
    .rec-category {
        background-color: #3E3E3E;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 10px;
        border-left: 4px solid #4CAF50;
        transition: transform 0.2s;
    }
    .rec-category:hover {
        transform: translateX(5px);
    }
    .rec-category h4 {
        margin: 0;
        color: #4CAF50;
    }
    .rec-category p {
        margin: 5px 0 0 0;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'result' not in st.session_state:
    st.session_state.result = None
if 'image' not in st.session_state:
    st.session_state.image = None
if 'audio_played' not in st.session_state:
    st.session_state.audio_played = False
if 'loading' not in st.session_state:
    st.session_state.loading = False
if 'processing_done' not in st.session_state:
    st.session_state.processing_done = False
if 'audio_data' not in st.session_state:
    st.session_state.audio_data = None
if 'playing_audio' not in st.session_state:
    st.session_state.playing_audio = False
if 'play_time' not in st.session_state:
    st.session_state.play_time = 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é OpenAI API
def text_to_speech(text, voice="nova"):
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        st.error("API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    if not text or text.strip() == "":
        st.error("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ—á—å")
        return None
    
    url = "https://api.openai.com/v1/audio/speech"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "tts-1",
        "input": text,
        "voice": voice,
        "speed": 1.0
    }
    
    try:
        response = requests.post(url, headers=headers, json=payload)
        
        if response.status_code == 200:
            return response.content
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤—É–∫–æ–≤–æ–π –≤–æ–ª–Ω—ã
def create_audio_wave():
    # –°–æ–∑–¥–∞–µ–º 30 —Å—Ç–æ–ª–±—Ü–æ–≤ —Ä–∞–∑–Ω–æ–π –≤—ã—Å–æ—Ç—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–≤—É–∫–æ–≤–æ–π –≤–æ–ª–Ω—ã
    wave_html = '<div class="audio-wave-container"><div class="audio-wave">'
    for i in range(30):
        # –í–∞—Ä–∏–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        animation_duration = np.random.randint(500, 1500)
        animation_delay = np.random.randint(0, 1000)
        height = np.random.randint(30, 90)
        
        wave_html += f'''
        <div class="wave-bar" style="animation-duration: {animation_duration}ms; 
                                     animation-delay: {animation_delay}ms;
                                     height: {height}%;"></div>
        '''
    wave_html += '<div class="rec-indicator"></div></div></div>'
    return wave_html

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é GPT-4o
def analyze_image(image_path):
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        return "API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."

    base64_image = encode_image(image_path)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ GPT-4o
    model = ChatOpenAI(model="gpt-4o")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    message = HumanMessage(
        content=[
            {
                "type": "text",
                "text": """–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º. 
                –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–µ –±–æ–ª—å—à–µ 5-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —Ñ–æ—Ç–æ –ª–∏—Ü–∞ - —Ç–∏–ø –∫–æ–∂–∏, —Ç–µ–∫—Å—Ç—É—Ä—É –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
                
                –ó–∞—Ç–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–∏ 3-4 –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–ª—è–º–∏:
                1. "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–û—á–∏—â–µ–Ω–∏–µ", "–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ", "–ó–∞—â–∏—Ç–∞", "–ü–∏—Ç–∞–Ω–∏–µ")
                2. "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è" (–∫–æ—Ä–æ—Ç–∫–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è)
                
                –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Ç–æ–Ω–æ–º, –∫–∞–∫ –±—É–¥—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –ò–∑–±–µ–≥–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
                
                –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π:
                [–ì–û–õ–û–°]
                –¢–≤–æ—è –∫–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—á—å (5-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –º–∞–∫—Å–∏–º—É–º) —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º —Ç–æ–Ω–æ–º
                [/–ì–û–õ–û–°]
                
                [–¢–ê–ë–õ–ò–¶–ê]
                [{"–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è1"}, {"–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è2", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è2"}, ...]
                [/–¢–ê–ë–õ–ò–¶–ê]
                """
            },
            {
                "type": "image_url",
                "image_url": {
                    "url": f"data:image/jpeg;base64,{base64_image}"
                }
            }
        ]
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
    response = model.invoke([message])
    return response.content

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
def play_audio_thread(audio_data):
    pygame.mixer.init()
    sound = pygame.mixer.Sound(BytesIO(audio_data))
    st.session_state.play_time = time.time()
    st.session_state.playing_audio = True
    sound.play()
    time.sleep(sound.get_length())
    st.session_state.playing_audio = False

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown("<div class='title'>ü™û –£–º–Ω–æ–µ –ó–µ—Ä–∫–∞–ª–æ: –°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π</div>", unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    api_key = st.text_input("OpenAI API –∫–ª—é—á", type="password")
    if api_key:
        os.environ["OPENAI_API_KEY"] = api_key
    
    voice_option = st.selectbox(
        "–ì–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è",
        ["alloy", "echo", "fable", "onyx", "nova", "shimmer"],
        index=4
    )
    
    st.subheader("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    st.write("""
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—â–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π.
    –û–Ω–æ –ù–ï –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –∏–ª–∏ –ª–µ—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.
    –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–∂–µ–π –≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥—É.
    """)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑
if st.session_state.loading and not st.session_state.processing_done and st.session_state.image:
    with st.spinner('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...'):
        st.session_state.result = analyze_image(st.session_state.image)
        st.session_state.loading = False
        st.session_state.audio_played = False
        st.session_state.processing_done = True
        st.rerun()

# –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏: –¥–ª—è –∫–∞–º–µ—Ä—ã –∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
col1, col2 = st.columns([1, 1])

with col1:
    # –ö–∞–º–µ—Ä–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", ["–ö–∞–º–µ—Ä–∞", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ"])
    
    if option == "–ö–∞–º–µ—Ä–∞":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä—ã
        img_file_buffer = st.camera_input("–ö–∞–º–µ—Ä–∞", label_visibility="collapsed", key="camera")
        if img_file_buffer is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            tfile = tempfile.NamedTemporaryFile(delete=False, suffix=".jpeg")
            tfile.write(img_file_buffer.getvalue())
            st.session_state.image = tfile.name
            
            if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", key="analyze_cam"):
                if not os.environ.get("OPENAI_API_KEY"):
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
                else:
                    with st.spinner():
                        st.session_state.loading = True
                        st.session_state.processing_done = False
                        st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    else:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(uploaded_file)
            st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            tfile = tempfile.NamedTemporaryFile(delete=False, suffix=".jpeg")
            tfile.write(uploaded_file.getbuffer())
            st.session_state.image = tfile.name
            
            if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", key="analyze_upload"):
                if not os.environ.get("OPENAI_API_KEY"):
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
                else:
                    with st.spinner():
                        st.session_state.loading = True
                        st.session_state.processing_done = False
                        st.experimental_rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏

with col2:
    # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.loading:
        st.markdown("<div class='loading'>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... <div class='thinking-dots'></div></div>", unsafe_allow_html=True)
        # –î–æ–±–∞–≤–∏–º –∞–Ω–∏–º–∞—Ü–∏—é "–¥—É–º–∞—é—â–∏—Ö" —Ç–æ—á–µ–∫
        st.markdown("""
        <style>
            .thinking-dots:after {
              content: '.';
              animation: dots 1.5s steps(5, end) infinite;
            }
            
            @keyframes dots {
              0%, 20% { content: '.'; }
              40% { content: '..'; }
              60% { content: '...'; }
              80%, 100% { content: ''; }
            }
        </style>
        """, unsafe_allow_html=True)
        
    if st.session_state.result:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ä–µ—á—å –∏ —Ç–∞–±–ª–∏—Ü—É
        result_text = st.session_state.result
        voice_text = ""
        table_json = ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≥–æ–ª–æ—Å–∞
        if "[–ì–û–õ–û–°]" in result_text and "[/–ì–û–õ–û–°]" in result_text:
            voice_start = result_text.find("[–ì–û–õ–û–°]") + len("[–ì–û–õ–û–°]")
            voice_end = result_text.find("[/–ì–û–õ–û–°]")
            voice_text = result_text[voice_start:voice_end].strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        if "[–¢–ê–ë–õ–ò–¶–ê]" in result_text and "[/–¢–ê–ë–õ–ò–¶–ê]" in result_text:
            table_start = result_text.find("[–¢–ê–ë–õ–ò–¶–ê]") + len("[–¢–ê–ë–õ–ò–¶–ê]")
            table_end = result_text.find("[/–¢–ê–ë–õ–ò–¶–ê]")
            table_json = result_text[table_start:table_end].strip()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—á–∏
        st.markdown("<div class='results-area'>", unsafe_allow_html=True)
        st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        st.markdown(voice_text)
        st.markdown("</div>", unsafe_allow_html=True)
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–æ–ª–æ—Å–æ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–π –≤–æ–ª–Ω—ã
        if not st.session_state.audio_played:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if st.session_state.audio_data is None and voice_text and voice_text.strip() != "":
                st.session_state.audio_data = text_to_speech(voice_text, voice_option)
                
            if st.session_state.audio_data:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–≤—É–∫–æ–≤–æ–π –≤–æ–ª–Ω—ã
                st.markdown(create_audio_wave(), unsafe_allow_html=True)
                
                # –°–∫—Ä—ã—Ç—ã–π –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                audio_file = BytesIO(st.session_state.audio_data)
                st.audio(audio_file, format="audio/mp3", autoplay=True)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è
                if not st.session_state.playing_audio:
                    audio_thread = threading.Thread(
                        target=play_audio_thread, 
                        args=(st.session_state.audio_data,)
                    )
                    audio_thread.daemon = True
                    audio_thread.start()
                    st.session_state.audio_played = True
        
        # –ï—Å–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, —Å–∫—Ä—ã–≤–∞–µ–º –≤–æ–ª–Ω—É
        if not st.session_state.playing_audio and st.session_state.audio_played:
            st.markdown("<style>.audio-wave-container { display: none; }</style>", unsafe_allow_html=True)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        try:
            if table_json and table_json.strip():
                try:
                    recommendations = json.loads(table_json)
                    
                    st.markdown("<div class='results-area' style='margin-top: 20px;'>", unsafe_allow_html=True)
                    st.markdown("### –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    
                    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                    for i, rec in enumerate(recommendations):
                        st.markdown(f"""
                        <div class="rec-category">
                            <h4>{rec['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}</h4>
                            <p>{rec['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è']}</p>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    st.markdown("</div>", unsafe_allow_html=True)
                except json.JSONDecodeError as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON: {str(e)}")
                    st.info("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
                    st.code(table_json)
                    
                    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    st.markdown("<div class='results-area' style='margin-top: 20px;'>", unsafe_allow_html=True)
                    st.markdown("### –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    st.write(table_json)
                    st.markdown("</div>", unsafe_allow_html=True)
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")

# –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if st.button("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
    if st.session_state.image and os.path.exists(st.session_state.image):
        os.unlink(st.session_state.image)
    st.session_state.result = None
    st.session_state.image = None
    st.session_state.audio_played = False
    st.session_state.audio_data = None
    st.session_state.loading = False
    st.session_state.processing_done = False
    st.session_state.playing_audio = False
    st.experimental_rerun()

# –ü–æ–¥–≤–∞–ª
st.markdown("<div class='footer'>¬© 2025 –£–º–Ω–æ–µ –ó–µ—Ä–∫–∞–ª–æ. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π, –∞ –Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã. –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ª–µ—á–µ–Ω–∏—è –∫–æ–∂–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∞.</div>", unsafe_allow_html=True)